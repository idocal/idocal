{"version":3,"sources":["components/Project.js","components/FullPage.js","components/Homepage.js","config.js","components/CaseStudy.js","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["Project","props","onClick","bind","this","history","push","alias","column","className","color","vAlignContent","hAlignContent","style","backgroundImage","name","tags","Component","withRouter","children","scrollingSpeed","dragAndMove","fadingEffect","render","Wrapper","Homepage","state","windowHeight","updateWindowDimensions","window","addEventListener","removeEventListener","setState","innerHeight","fullHeight","minHeight","grow","width","FullPage","height","projects","CaseStudy","myRef","React","createRef","console","log","current","scrollIntoView","behavior","prevProps","match","params","project","roles","join","sections","ref","map","section","i","imgSource","toString","key","title","text","AppRouter","path","exact","component","App","fullpageApi","id","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcf8f438.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport FlexView from \"react-flexview/lib/FlexView\";\nimport '../style/Project.css';\nimport { withRouter } from 'react-router-dom'\n\nclass Project extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick() {\n        this.props.history.push('/work/' + this.props.alias);\n    }\n\n    render() {\n        let backgroundImage = 'url(\\'/img/rosette-header.jpg\\')';\n        return (\n            <FlexView column\n                      className={ \"project \" + this.props.color }\n                      onClick={this.onClick}\n                      vAlignContent=\"center\"\n                      hAlignContent=\"center\">\n                <div className=\"thumb\" style={{backgroundImage: backgroundImage}} />\n                <h3>{this.props.name}</h3>\n                <h4>{this.props.tags}</h4>\n            </FlexView>\n        )\n    }\n\n}\n\nexport default withRouter(Project);","import React from 'react';\nimport ReactFullpage from \"@fullpage/react-fullpage\";\n\nconst scrollingSpeed = 1000;\n\nexport default ({ children }) => (\n    <ReactFullpage\n        scrollingSpeed = {scrollingSpeed}\n        dragAndMove={true}\n        fadingEffect={true}\n        render={() => {\n            return (\n                <ReactFullpage.Wrapper>\n                    {children}\n                </ReactFullpage.Wrapper>\n            );\n        }}\n    />\n)\n","import React, { Component } from 'react';\nimport '../style/Homepage.css';\nimport FlexView from 'react-flexview';\nimport Project from \"./Project\";\nimport FullPage from './FullPage';\n\nexport default class Homepage extends Component {\n\n    state = {\n        windowHeight: 0\n    };\n\n    constructor(props) {\n        super(props);\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({ windowHeight: window.innerHeight });\n    }\n\n    render() {\n        const fullHeight = {minHeight: this.state.windowHeight + \"px\"};\n        return (\n            <FlexView grow column className=\"homepage\" width=\"100%\">\n            <FullPage>\n                    <FlexView column className=\"banner section\"\n                              hAlignContent=\"center\"\n                              vAlignContent=\"center\"\n                              width=\"100%\"\n                              style={fullHeight}\n                    >\n                        <h1>Hi, I'm Ido</h1>\n                        <h2>I bring technological ideas to life</h2>\n                    </FlexView>\n\n                    <FlexView className=\"projects section\" width=\"100%\" style={fullHeight}>\n                        <FlexView className=\"row half\">\n                            <Project name=\"Feelboard\"\n                                     tags=\"Deep Learning, AI, Computer Vision\"\n                                     color=\"red\"\n                                     alias=\"feelboard\"/>\n                        </FlexView>\n\n                        <FlexView column className=\"half\">\n                            <FlexView className=\"row\" height=\"50%\">\n                                <Project name=\"Storyline.ai\"\n                                         tags=\"Deep Learning, NLP, Generation\"\n                                         color=\"black\"\n                                         alias=\"storyline\" />\n                            </FlexView>\n                            <FlexView className=\"row\" height=\"50%\">\n                                <Project name=\"Meezi\"\n                                         tags=\"Social app, iOS, Android\"\n                                         color=\"blue\"\n                                         alias=\"meezi\"/>\n                            </FlexView>\n                        </FlexView>\n                    </FlexView>\n\n                    <FlexView className=\"projects section\" width=\"100%\" style={fullHeight}>\n                        <FlexView className=\"row half\">\n                            <Project name=\"Rosette Text Analyzer\"\n                                     tags=\"NLP, Machine Learning, Entity Extraction\"\n                                     color=\"black\"\n                                     alias=\"rosette\"/>\n                        </FlexView>\n\n                        <FlexView column className=\"half\">\n                            <FlexView className=\"row\" height=\"50%\">\n                                <Project name=\"Bo Nariv\"\n                                         tags=\"Politics, Chat app\"\n                                         color=\"lightgray\"\n                                         alias=\"bonariv\" />\n                            </FlexView>\n                            <FlexView className=\"row\" height=\"50%\">\n                                <Project name=\"MotionSense\"\n                                         tags=\"Research, Signal Analysis\"\n                                         color=\"darkgray\"\n                                         alias=\"motionsense\"/>\n                            </FlexView>\n                        </FlexView>\n                    </FlexView>\n            </FullPage>\n            </FlexView>\n        );\n    }\n\n}\n","export const projects = {\n    'rosette': {\n        'name': \"Rosette Text Analyzer\",\n        'tags': [\"NLP\", \"Machine Learning\", \"Entity Extraction\"],\n        'roles': [\"Solo implementation\", \"Research\"],\n        'sections': [\n            {\n                'title': 'All-in-one NLP analyzer',\n                'text': 'Rosette is an all-in-one solution for various NLP tasks: Entity Extraction, Sentiment Analysis, Categorization, Part of Speech Tagging, and many more.'\n            },\n            {\n                'title': 'Gain text insights quickly',\n                'text': 'Rosette Text Analyzer puts together the entire solution space into a one-click experience! Pick any text and analyze it immediately.'\n            }\n        ]\n    }\n};","import React, { Component } from 'react';\nimport FlexView from 'react-flexview';\nimport '../style/CaseStudy.css';\nimport { projects } from \"../config\";\nimport Project from \"./Project\";\nimport FullPage from \"./FullPage\";\n\nexport default class CaseStudy extends Component {\n    state = {\n        windowHeight: 0\n    };\n\n    constructor(props) {\n        super(props);\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.myRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n        console.log(this.myRef.current);\n        this.myRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({ windowHeight: window.innerHeight });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.match.params.project !== prevProps.match.params.project) {\n            this.myRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n    }\n\n    render() {\n        const fullHeight = this.state.windowHeight + \"px\";\n        // const { project } = this.props.match.params;\n        const project = 'rosette';\n        const headerImage = '/img/' + project + '-header.jpg';\n\n        const name = projects[project].name;\n        const roles = projects[project].roles.join(\", \");\n        const sections = projects[project].sections;\n\n        return (\n            <FullPage>\n            <div ref={this.myRef}>\n                <FlexView grow column className=\"case-study\" width=\"100%\">\n                    <FlexView className=\"section header\"\n                              width=\"100%\"\n                              vAlignContent=\"bottom\"\n                              style={{\n                                  backgroundImage: 'url(' + headerImage + ')',\n                                  minHeight: fullHeight\n                              }}>\n                        <FlexView column className=\"headline\">\n                            <h1>{name}</h1>\n                            <h2>{roles}</h2>\n                        </FlexView>\n\n                    </FlexView>\n\n                    {\n                        sections.map((section, i) => {\n                            let imgSource = \"/img/\" + project + \"-section-\" + (i + 1).toString() + \".png\";\n                            return (\n                                <FlexView key={i}\n                                          style={{minHeight: fullHeight}}\n                                          className=\"section case-section\"\n                                          vAlignContent=\"center\">\n                                    <FlexView column className=\"info half\" vAlignContent=\"center\" hAlignContent=\"left\">\n                                        <h2>{section.title}</h2>\n                                        <p>{section.text}</p>\n                                    </FlexView>\n                                    <FlexView className=\"case-image\" vAlignContent=\"center\" hAlignContent=\"right\">\n                                        <div className=\"image\" style={{backgroundImage: 'url(' + imgSource + ')'}} />\n                                    </FlexView>\n                                </FlexView>\n\n                            )\n                        })\n                    }\n\n                    <FlexView className=\"projects section\" width=\"100%\" style={{minHeight:fullHeight}}>\n                        <FlexView className=\"row half\">\n                            <Project name=\"Feelboard\"\n                                     tags=\"Deep Learning, AI, Computer Vision\"\n                                     color=\"lightgray\"\n                                     alias=\"feelboard\"/>\n                        </FlexView>\n\n                        <FlexView column className=\"half\">\n                            <FlexView className=\"row\" height=\"50%\">\n                                <Project name=\"Storyline.ai\"\n                                         tags=\"Deep Learning, NLP, Generation\"\n                                         color=\"gray\"\n                                         alias=\"storyline\" />\n                            </FlexView>\n                            <FlexView className=\"row\" height=\"50%\">\n                                <Project name=\"Meezi\"\n                                         tags=\"Social app, iOS, Android\"\n                                         color=\"darkgray\"\n                                         alias=\"meezi\"/>\n                            </FlexView>\n                        </FlexView>\n                    </FlexView>\n\n                </FlexView>\n            </div>\n            </FullPage>\n        )\n    }\n\n}","import React from \"react\";\nimport {BrowserRouter as Router, Link, Route} from \"react-router-dom\";\nimport Homepage from './components/Homepage';\nimport CaseStudy from \"./components/CaseStudy\";\n\n\nfunction AppRouter() {\n    return (\n        <Router>\n            {/*<div className=\"sticky-header\">*/}\n            {/*    <Link to='/'>*/}\n            {/*        <h1>idocal</h1>*/}\n            {/*    </Link>*/}\n            {/*</div>*/}\n            <Route path=\"/\" exact component={Homepage} />\n            <Route path=\"/work/:project\" component={CaseStudy} />\n        </Router>\n    )\n}\n\nexport default AppRouter\n","import React, { Component } from 'react';\nimport FlexView from 'react-flexview';\nimport './App.css';\nimport AppRouter from \"./AppRouter\";\nimport ReactFullpage from '@fullpage/react-fullpage';\n\n\nexport default class App extends Component {\n    render() {\n\n        return (\n            <ReactFullpage\n                //fullpage options\n                scrollingSpeed = {1000} /* Options here */\n                render={({ state, fullpageApi }) => {\n                    return (\n                        <ReactFullpage.Wrapper>\n                            <FlexView id=\"fullpage\" className=\"app\" height=\"100%\">\n                                <AppRouter />\n                            </FlexView>\n                        </ReactFullpage.Wrapper>\n                    );\n                }}\n            />\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}